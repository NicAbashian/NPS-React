{"version":3,"sources":["components/Detail/Detail.js","components/CampGroundDetails/CampGroundDetails.js","App.js","serviceWorker.js","index.js"],"names":["Detail","props","useState","icon","field","fieldValue","className","CampGroundDetails","campground","key","description","weatheroverview","operatingHours","fees","campsites","tentonly","group","rvonly","directionsoverview","regulationsoverview","contacts","App","nationalParks","parks","parkCode","setParkCode","disableSelect","setDisableSelect","campGroundData","setCampGroundData","selectedCampground","setSelectedCampground","gridData","setGridData","gridApi","setGridApi","listOfParks","map","parkObj","value","name","role","htmlFor","id","onChange","event","url","target","showLoadingOverlay","fetch","then","res","json","campgrounds","data","tmpRowData","forEach","push","totalsites","amenities","showers","length","laundry","accessibility","rvallowed","dumpstation","hideOverlay","showNoRowsOverlay","catch","error","console","disabled","ensureDomOrder","suppressColumnVirtualisation","columnDefs","hide","headerName","resizable","sortable","filter","width","rowData","rowSelection","onGridReady","params","api","sizeColumnsToFit","onSelectionChanged","selectedRows","getSelectedRows","i","tmpCGData","JSON","parse","stringify","emailAddresses","emailAddress","hourString","j","feeString","title","cost","slice","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.fd22e762.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nimport './Detail.css';\r\n\r\n/**\r\n * Main function that renders a Detail\r\n * @constructor\r\n */\r\nfunction Detail(props) {\r\n  // States\r\n  const [icon] = useState(props.icon);\r\n  const [field] = useState(props.field);\r\n  const [fieldValue] = useState(props.fieldValue);\r\n  \r\n  return (\r\n    <div className=\"detailItem\">\r\n      <span className=\"detailItemField\"><i className=\"material-icons\">{icon}</i>{field}: </span>\r\n      <span className=\"detailItemValue\">{fieldValue}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Detail;","import React from 'react';\r\nimport Detail from '../Detail/Detail.js';\r\nimport './CampGroundDetails.css'\r\n\r\n/**\r\n * Main function that renders a list of Detail components\r\n * @constructor\r\n */\r\nfunction CampGroundDetails(props) {\r\n  // States\r\n  const campground = props.campground;\r\n\r\n  return (\r\n    <div className=\"detailContainer\">\r\n    {\r\n      campground ? [\r\n          <Detail key=\"0\" icon={'notes'} field={'Description'} fieldValue={campground.description} />,\r\n          <Detail key=\"1\" icon={'cloud'} field={'Weather'} fieldValue={campground.weatheroverview} />,\r\n          <Detail key=\"2\" icon={'schedule'} field={'Hours'} fieldValue={campground.operatingHours} />,\r\n          <Detail key=\"3\" icon={'attach_money'} field={'Fees'} fieldValue={campground.fees} />,\r\n          <Detail key=\"4\" icon={'change_history'} field={'# of Tent Sites'} fieldValue={campground.campsites.tentonly} />,\r\n          <Detail key=\"5\" icon={'group'} field={'# of Group Sites'} fieldValue={campground.campsites.group} />,\r\n          <Detail key=\"6\" icon={'airport_shuttle'} field={'# of RV Sites'} fieldValue={campground.campsites.rvonly} />,\r\n          <Detail key=\"7\" icon={'directions_car'} field={'Directions'} fieldValue={campground.directionsoverview} />,\r\n          <Detail key=\"8\" icon={'security'} field={'Regulations'} fieldValue={campground.regulationsoverview} />,\r\n          <Detail key=\"9\" icon={'email'} field={'Contacts'} fieldValue={campground.contacts} />\r\n      ]\r\n      : <p>No Campground Selected</p>\r\n    }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CampGroundDetails;","import React, { useState } from 'react';\r\n\r\nimport CampGroundDetails from './components/CampGroundDetails/CampGroundDetails.js';\r\n\r\n// AG Grid\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-balham-dark.css';\r\n\r\nimport './App.css';\r\n\r\nimport nationalParks from './parks.json';\r\n\r\n/**\r\n * Main function that renders the application\r\n * @constructor\r\n */\r\nfunction App() {\r\n  // States\r\n  const [parks] = useState(nationalParks); // Lists of park names and codes\r\n  const [parkCode, setParkCode] = useState('');\r\n  const [disableSelect, setDisableSelect] = useState(false); // boolean to disable park select\r\n  const [campGroundData, setCampGroundData] = useState([]) // Array of campground objects from the NPS API\r\n  const [selectedCampground, setSelectedCampground] = useState() // Object containing selected campground information\r\n  const [gridData, setGridData] = useState([]); // Array holding AG Grid data\r\n  const [gridApi, setGridApi] = useState({}); // AG Grid API object\r\n\r\n  const listOfParks = parks.map(parkObj => (\r\n    <option key={parkObj.parkCode} value={parkObj.parkCode}>{parkObj.name}</option>\r\n  ));\r\n\r\n  const columnDefs = [\r\n    { field:'id', hide: true },\r\n    { headerName: 'Campground', field: 'name', resizable: true, sortable: true, filter: true, width: 200 },\r\n    { headerName: '# of All Sites', field: 'sites', resizable: true, filter: true, width: 100 },\r\n    { headerName: '# of Showers', field: 'showers', resizable: true, filter: true, width: 120 },\r\n    { headerName: 'Laundry', field: 'laundry', resizable: true, filter: true, width: 110 },\r\n    { headerName: 'RV(s) Allowed', field: 'rv', resizable: true, filter: true, width: 125 },\r\n    { headerName: 'Dump Station', field: 'dumpStation', resizable: true, filter: true, width: 120 },\r\n  ];\r\n\r\n  /**\r\n   * Calls NPS API and sets campGroundData and gridData\r\n   * @param {*} event - Event fired from html select change\r\n   */\r\n  function getParkCampgroundInfo(event) {\r\n    const url = 'https://api.nps.gov/api/v1/campgrounds?api_key=SI2Gfleu6ulfSaZ9zgacK4IFgZLfd0ZYz7OguQIM&parkCode=' + event.target.value;\r\n\r\n    setParkCode(event.target.value);\r\n    setDisableSelect(true);\r\n    gridApi.showLoadingOverlay();\r\n\r\n    fetch(url)\r\n      .then(res => res.json())\r\n      .then(({ data: campgrounds }) => {\r\n        const tmpRowData = [];\r\n        setCampGroundData(campgrounds);\r\n\r\n        campgrounds.forEach((campground) => {\r\n          tmpRowData.push({\r\n            \"id\": campground.id,\r\n            \"name\": campground.name,\r\n            \"sites\": campground.campsites.totalsites,\r\n            \"showers\": campground.amenities.showers[0] !== 'None' ? campground.amenities.showers.length : 0,\r\n            \"laundry\": campground.amenities.laundry === '' ? 'No': campground.amenities.laundry,\r\n            \"rv\": campground.accessibility.rvallowed ? 'Yes' : 'No',\r\n            \"dumpStation\": campground.amenities.dumpstation === '' ? 'None': campground.amenities.dumpstation\r\n          });\r\n        });\r\n\r\n        setGridData(tmpRowData);\r\n        gridApi.hideOverlay();\r\n        if (campgrounds.length === 0) {\r\n          gridApi.showNoRowsOverlay();\r\n        }\r\n        setSelectedCampground();\r\n        setDisableSelect(false);\r\n      })\r\n      .catch(error => console.error(error));\r\n  }\r\n\r\n  /**\r\n   * Sets gridApi variable and allows access to grid functions. Resizes grid columns.\r\n   * @param {*} params \r\n   */\r\n  function onGridReady(params) {\r\n    setGridApi(params.api);\r\n    params.api.sizeColumnsToFit();\r\n  }\r\n\r\n  /**\r\n   * Gets the selected row from the grid, formats it, and sets selectedCampground\r\n   */\r\n  function updateDetails() {\r\n    const selectedRows = gridApi.getSelectedRows();\r\n\r\n    setSelectedCampground();\r\n\r\n    if (selectedRows.length === 1) {\r\n      for (let i = 0; i < campGroundData.length; i ++) {\r\n        if (campGroundData[i].id === selectedRows[0].id) {\r\n          const tmpCGData = JSON.parse(JSON.stringify(campGroundData[i])); // Deep clone of data.\r\n          \r\n          // Build contact string\r\n          if (tmpCGData.contacts && tmpCGData.contacts.emailAddresses && tmpCGData.contacts.emailAddresses.length > 0) {\r\n            tmpCGData.contacts = `Email: ${tmpCGData.contacts.emailAddresses[0].emailAddress}`;\r\n          } else {\r\n            tmpCGData.contacts = 'No contact information provided.';\r\n          }\r\n\r\n          // Build hours string\r\n          if (tmpCGData.operatingHours) {\r\n            let hourString = '';\r\n            for (let j = 0; j < tmpCGData.operatingHours.length; j++) {\r\n              hourString += tmpCGData.operatingHours[j].description + ' ';\r\n            }\r\n            tmpCGData.operatingHours = hourString;\r\n          } else {\r\n            tmpCGData.operatingHours = 'No hours information provided.'\r\n          }\r\n\r\n          // Build fees string\r\n          if (tmpCGData.fees && tmpCGData.fees.length > 0) {\r\n            let feeString = '';\r\n            for (let j = 0; j < tmpCGData.fees.length; j++) {\r\n              if (tmpCGData.fees[j].title) {\r\n                feeString += tmpCGData.fees[j].title\r\n              }\r\n              if (tmpCGData.fees[j].cost) {\r\n                feeString += ': $' +tmpCGData.fees[j].cost.slice(0, -2) + '. ';\r\n              }\r\n            }\r\n            tmpCGData.fees = feeString;\r\n          } else {\r\n            tmpCGData.fees = 'No fee data provided.';\r\n          }\r\n\r\n          setSelectedCampground(tmpCGData);\r\n          i = campGroundData.length; // Selected campground found, stop looping\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\" role=\"main\">\r\n      <h1>Select a park to view it's campgrounds.</h1>\r\n      <div className=\"parkSelect\">\r\n        <label htmlFor=\"listOfParks\">National Parks: </label>\r\n        <select id=\"listOfParks\" onChange={getParkCampgroundInfo} disabled={disableSelect}>\r\n          {listOfParks}\r\n        </select>\r\n      </div>\r\n      <h2>Select a campground to view details.</h2>\r\n      <div className=\"ag-theme-balham-dark gridContainer\">\r\n        <AgGridReact\r\n          ensureDomOrder={true}\r\n          suppressColumnVirtualisation={true}\r\n          columnDefs={columnDefs}\r\n          rowData={gridData}\r\n          rowSelection=\"single\"\r\n          onGridReady={onGridReady}\r\n          onSelectionChanged={updateDetails}\r\n        >\r\n        </AgGridReact>\r\n      </div>\r\n      <h2>Campground Details</h2>\r\n      <CampGroundDetails campground={selectedCampground} />\r\n      <button id=\"bookButton\">\r\n        {/* NPS API does not return this yet. Temporary work around below\r\n        <a href={selectedCampground ? selectedCampground.reservationsurl: ''}>Book A Site</a>\r\n        */}\r\n        <a href={selectedCampground ? \"http://www.nps.gov/\"+ parkCode +\"/planyourvisit/campgrounds.htm\": ''}>Book A Site</a>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}